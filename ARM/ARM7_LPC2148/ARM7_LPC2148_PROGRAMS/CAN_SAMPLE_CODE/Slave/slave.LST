ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE slave
OBJECT MODULE PLACED IN slave.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe slave.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include<LPC21xx.h>
    2          #include<stdio.h>
    3          #include "tnmadelay.h"
    4          #include "tnma4bitlcd2129.h"
    5          #include "can_func.h"
    6          #include "tnmaUART2129.h"
    7          #include "tnmaADC.h"
    8          
    9          int fire(void)
   10          {
   11   1           int input;
   12   1           IODIR0=0xF0;
   13   1           input=IOPIN0;
   14   1           if((input&0x04)==0x04)
   15   1              return 1;
   16   1           else 
   17   1              return 0;
   18   1      }
   19          
   20          int obstacle(void)
   21          {
   22   1           int input;
   23   1           IODIR0=0xF0;
   24   1           input=IOPIN0;
   25   1           if((input&0x08)==0x08)
   26   1              return 1;
   27   1           else 
   28   1              return 0;
   29   1      }
   30          
   31          int main(void)
   32          {
   33   1      
   34   1      int data=0,data1=0,data2=0,data3=0,f,o;
   35   1      unsigned int val;
   36   1      char dt[15];
   37   1      IODIR1 = 0X00FF0000;
   38   1      IOCLR1 = 0x00FF0000;
   39   1      Can_Init();
   40   1      Init_UART0();
   41   1      init_4bit_lcd();
   42   1      send_string_u0("Slave..\n\r");
   43   1      disp_string(1,0x80,"slave.");
   44   1      while(1) {
   45   2          
   46   2               init_ADC();
   47   2               temp(&data);
   48   2               val=(((float)data/1024)*330);
   49   2               sprintf(dt," Temp: %2d dC",val);
   50   2               disp_string(0,0x80,dt);
   51   2               send_string_u0(dt);
   52   2               send_string_u0("\n\r");
   53   2      
   54   2               init_ADC1();
   55   2               temp(&data1);
   56   2               sprintf(dt," CO: %3d ",data1);
   57   2               disp_string(0,0xc0,dt);
   58   2               send_string_u0(dt);
   59   2               send_string_u0("\n\r");
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 2   

   60   2                               
   61   2          //   delay_ms(1000);
   62   2      
   63   2               init_ADC2();
   64   2               temp(&data2);
   65   2               sprintf(dt," Battery: %2d %",data2);
   66   2               disp_string(0,0x80,dt);
   67   2               send_string_u0(dt);
   68   2               send_string_u0("\n\r");
   69   2      
   70   2      
   71   2               init_ADC3();
   72   2               temp(&data3);
   73   2               sprintf(dt," Fuel %2d L ",data3);
   74   2               disp_string(0,0xc0,dt);
   75   2               send_string_u0(dt);
   76   2               send_string_u0("\n\r");
   77   2      
   78   2      
   79   2      
   80   2               SendMessage1(0x000000AB,val,data1,data2,data3);
   81   2               
   82   2               f=fire();
   83   2               
   84   2               o=obstacle();
   85   2      
   86   2               SendMessage2(0x000000AB,f,o);
   87   2      
   88   2      
   89   2               if(f==1){
   90   3                  send_string_u0(" Fire Detected\n\r");
   91   3                  send_string_u0(" Vehicle OFF!!!\n\r");
   92   3                  while(f==1){
   93   4                            f=fire();
   94   4                          }
   95   3                  }
   96   2               else
   97   2                  send_string_u0(" No Fire\n\r");
   98   2      
   99   2      
  100   2               if(o==1){
  101   3                  send_string_u0(" Obstacle Detected\n\r");
  102   3                  send_string_u0(" Vehicle OFF!!!\n\r");
  103   3                  while(o==1){
  104   4                               o=obstacle();
  105   4                          }
  106   3                  }
  107   2               else
  108   2                  send_string_u0(" No Obstacle\n\r");     
  109   2              
  110   2               
  111   2                    
  112   2                if(data1>390){
  113   3                  disp_string(0,0x80," High CO Level ");
  114   3                  disp_string(0,0xc0," Vehicle OFF!!!");
  115   3                  send_string_u0("\n\r High CO Level \n\r");   
  116   3                  send_string_u0(" Vehicle OFF!!!\n\r");   
  117   3                      
  118   3                  while(data1>390){
  119   4                          init_ADC1();
  120   4                          temp(&data1);
  121   4                          }
  122   3                  }
  123   2              if(val>60){
  124   3                  disp_string(0,0x80,"High Temp Level");
  125   3                  disp_string(0,0xc0," Vehicle OFF!!!");
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 3   

  126   3                  send_string_u0("\n\r High Temp Level \n\r");     
  127   3                  send_string_u0(" Vehicle OFF!!!\n\r");  
  128   3                  while(val>60){
  129   4                          init_ADC();
  130   4                          temp(&data);
  131   4                          val=(((float)data/1024)*330);
  132   4                          }
  133   3                  }
  134   2                   delay_ms(1000);    
  135   2      }
  136   1      return 0;
  137   1      }
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (sprintf?T)
 EXTERN NUMBER (__startup)
 EXTERN CODE16 (?C?FCAST?T)
 EXTERN CODE16 (?C?FPDIV?T)
 EXTERN CODE16 (?C?FPMUL?T)
 EXTERN CODE16 (?C?CASTF?T)



*** PUBLICS:
 PUBLIC         delay_10us?T
 PUBLIC         delay_ms?T
 PUBLIC         command4bit?T
 PUBLIC         command?T
 PUBLIC         init_4bit_lcd?T
 PUBLIC         display?T
 PUBLIC         disp_string?T
 PUBLIC         Can_Init?T
 PUBLIC         send_remote_frame?T
 PUBLIC         Wait_for_data_frame?T
 PUBLIC         Wait_for_remote_frame?T
 PUBLIC         SendMessage2?T
 PUBLIC         SendMessage1?T
 PUBLIC         ReceiveMessage?T
 PUBLIC         Init_UART0?T
 PUBLIC         Init_UART1?T
 PUBLIC         read_byte_u1?T
 PUBLIC         read_byte_u0?T
 PUBLIC         send_byte_u0?T
 PUBLIC         send_wait_u0?T
 PUBLIC         send_string_u0?T
 PUBLIC         clear_buffer_u1?T
 PUBLIC         clear_buffer_u0?T
 PUBLIC         init_ADC?T
 PUBLIC         init_ADC1?T
 PUBLIC         init_ADC2?T
 PUBLIC         init_ADC3?T
 PUBLIC         read_adc?T
 PUBLIC         temp?T
 PUBLIC         fire?T
 PUBLIC         obstacle?T
 PUBLIC         main



*** DATA SEGMENT '?CON?slave':
 00000000          ??S_21:
 00000000            DB          0x0A,0x0D,' High Temp Level ',0x0A,0x0D
 00000015            DB          0x00
 00000016          ??S_20:
 00000016            DB          'High Temp Level',0x00
 00000026          ??S_19:
 00000026            DB          0x0A,0x0D,' High CO Level ',0x0A,0x0D,0x00
 0000003A          ??S_18:
 0000003A            DB          ' Vehicle OFF!!!',0x00
 0000004A          ??S_17:
 0000004A            DB          ' High CO Level ',0x00
 0000005A          ??S_16:
 0000005A            DB          ' No Obstacle',0x0A,0x0D,0x00
 00000069          ??S_15:
 00000069            DB          ' Obstacle Detected',0x0A,0x0D,0x00
 0000007E          ??S_14:
 0000007E            DB          ' No Fire',0x0A,0x0D,0x00
 00000089          ??S_13:
 00000089            DB          ' Vehicle OFF!!!',0x0A,0x0D,0x00
 0000009B          ??S_12:
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 5   

 0000009B            DB          ' Fire Detected',0x0A,0x0D,0x00
 000000AC          ??S_11:
 000000AC            DB          ' Fuel %2d L ',0x00
 000000B9          ??S_10:
 000000B9            DB          ' Battery: %2d %',0x00
 000000C9          ??S_9:
 000000C9            DB          ' CO: %3d ',0x00
 000000D3          ??S_8:
 000000D3            DB          0x0A,0x0D,0x00
 000000D6          ??S_7:
 000000D6            DB          ' Temp: %2d dC',0x00
 000000E4          ??S_6:
 000000E4            DB          'slave.',0x00
 000000EB          ??S_5:
 000000EB            DB          'Slave..',0x0A,0x0D,0x00
 000000F5          ??S_4:
 000000F5            DB          'wrong',0x00
 000000FB          ??S_3:
 000000FB            DB          'correct',0x00
 00000103          ??S_2:
 00000103            DB          'in loop',0x00
 0000010B          ??S_1:
 0000010B            DB          'Remt fram snt',0x00

*** CODE SEGMENT '?PR?delay_10us?T?slave':
    1:  void delay_10us(long int dly)
 00000000  ---- Variable 'dly' assigned to Register 'R0' ----
    2:  {
 00000000            ; SCOPE-START
    4:      for(k=0;k<dly;k++)
 00000000  2100      MOV         R1,#0x0
 00000002  ---- Variable 'k' assigned to Register 'R1' ----
 00000002  E005      B           L_3  ; T=0x00000010
    8:       for(j=0;j<200;j++)   // one iteration step takes 3 machine cycle period
 00000004          L_10:
 00000004  2200      MOV         R2,#0x0
 00000006  ---- Variable 'j' assigned to Register 'R2' ----
   11:       }                       // 1 M.cycle=(1/60)us. so 3*(1/60)us=(1/20)us
 00000006          L_6:
 00000006  3201      ADD         R2,#0x1
 00000008  1C13      MOV         R3,R2 ; j
 0000000A  2BC8      CMP         R3,#0xC8 ; j
 0000000C  DBFB      BLT         L_6  ; T=0x00000006
   12:     }                       // 200 * (1/20)us gives ~~ 10us
 0000000E  3101      ADD         R1,#0x1
 00000010          L_3:
 00000010  1C0A      MOV         R2,R1 ; k
 00000012  1C03      MOV         R3,R0 ; dly
 00000014  429A      CMP         R2,R3 ; dly
 00000016  DBF5      BLT         L_10  ; T=0x00000004
 00000018            ; SCOPE-END
   14:  }
 00000018  4770      BX          R14
 0000001A          ENDP ; 'delay_10us?T'


*** CODE SEGMENT '?PR?delay_ms?T?slave':
   17:  void delay_ms(long int dly)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'dly' assigned to Register 'R0' ----
   18:  {
 00000002            ; SCOPE-START
   20:      for(k=0;k<dly;k++)
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'k' assigned to Register 'R1' ----
 00000004  E00A      B           L_13  ; T=0x0000001C
   22:         for(i=0;i<100;i++)
 00000006          L_20:
 00000006  2200      MOV         R2,#0x0
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 6   

 00000008  ---- Variable 'i' assigned to Register 'R2' ----
   25:             for(j=0;j<200;j++)     // one iteration step takes 3 machine cycle period
 00000008          L_25:
 00000008  2300      MOV         R3,#0x0
 0000000A  ---- Variable 'j' assigned to Register 'R3' ----
   28:             }                      // 1 M.cycle=(1/60)us. so 3*(1/60)us=(1/20)us
 0000000A          L_21:
 0000000A  3301      ADD         R3,#0x1
 0000000C  1C1C      MOV         R4,R3 ; j
 0000000E  2CC8      CMP         R4,#0xC8 ; j
 00000010  D3FB      BCC         L_21  ; T=0x0000000A
   29:         }                          // 200 * (1/20)us gives ~~ 10us
 00000012  3201      ADD         R2,#0x1
 00000014  1C13      MOV         R3,R2 ; i
 00000016  2B64      CMP         R3,#0x64 ; i
 00000018  D3F6      BCC         L_25  ; T=0x00000008
   30:      }
 0000001A  3101      ADD         R1,#0x1
 0000001C          L_13:
 0000001C  1C03      MOV         R3,R0 ; dly
 0000001E  1C0A      MOV         R2,R1 ; k
 00000020  429A      CMP         R2,R3 ; k
 00000022  D3F0      BCC         L_20  ; T=0x00000006
 00000024            ; SCOPE-END
   32:  }
 00000024  BC10      POP         {R4}
 00000026  4770      BX          R14
 00000028          ENDP ; 'delay_ms?T'


*** CODE SEGMENT '?PR?command4bit?T?slave':
    1: void command4bit(char c)
 00000000  B500      PUSH        {LR}
 00000002  1C01      MOV         R1,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R1' ----
    2: {
 00000004            ; SCOPE-START
    4:  cc=c;
 00000004  1C08      MOV         R0,R1 ; c
 00000006  0602      LSL         R2,R0,#0x18 ; c
 00000008  0E12      LSR         R2,R2,#0x18
 0000000A  ---- Variable 'cc' assigned to Register 'R2' ----
    5:  cc=cc<<20; 
 0000000A  0512      LSL         R2,R2,#0x14 ; cc
    7:  IOCLR1=0X00F00000;  //clear D7 to D4
 0000000C  4800      LDR         R1,=0xF00000
 0000000E  4800      LDR         R0,=0xE002801C
 00000010  6001      STR         R1,[R0,#0x0]
    9:  IOCLR1=0X00040000;  //rw = 0
 00000012  4800      LDR         R1,=0x40000
 00000014  4800      LDR         R0,=0xE002801C
 00000016  6001      STR         R1,[R0,#0x0]
   10:  IOCLR1=0X00020000;  //rs = 0
 00000018  4800      LDR         R1,=0x20000
 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6001      STR         R1,[R0,#0x0]
   12:  IOSET1=(cc&0X00F00000);
 0000001E  1C11      MOV         R1,R2 ; cc
 00000020  4800      LDR         R0,=0xF00000
 00000022  4001      AND         R1,R0
 00000024  4800      LDR         R0,=0xE0028014
 00000026  6001      STR         R1,[R0,#0x0]
   13:  IOSET1=0X00080000;   //en=1
 00000028  4800      LDR         R1,=0x80000
 0000002A  4800      LDR         R0,=0xE0028014
 0000002C  6001      STR         R1,[R0,#0x0]
   14:  delay_10us(20);
 0000002E  2014      MOV         R0,#0x14
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 7   

 00000030  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000032  FFE6      BL          delay_10us?T  ; T=0x0001  (2)
   15:  IOCLR1=0X00080000;   //en=0 
 00000034  4800      LDR         R1,=0x80000
 00000036  4800      LDR         R0,=0xE002801C
 00000038  6001      STR         R1,[R0,#0x0]
 0000003A            ; SCOPE-END
   16: }
 0000003A  BC08      POP         {R3}
 0000003C  4718      BX          R3
 0000003E          ENDP ; 'command4bit?T'


*** CODE SEGMENT '?PR?command?T?slave':
   18: void command(char c)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R5' ----
   19: {
 00000004            ; SCOPE-START
   21:  cc=c;
 00000004  1C28      MOV         R0,R5 ; c
 00000006  0604      LSL         R4,R0,#0x18 ; c
 00000008  0E24      LSR         R4,R4,#0x18
 0000000A  ---- Variable 'cc' assigned to Register 'R4' ----
   22:  cc=cc<<16;  //to send higher nibble first
 0000000A  0424      LSL         R4,R4,#0x10 ; cc
   23:  IOCLR1=0X00F00000;
 0000000C  4800      LDR         R1,=0xF00000
 0000000E  4800      LDR         R0,=0xE002801C
 00000010  6001      STR         R1,[R0,#0x0]
   24:  IOCLR1=0X00040000;
 00000012  4800      LDR         R1,=0x40000
 00000014  4800      LDR         R0,=0xE002801C
 00000016  6001      STR         R1,[R0,#0x0]
   25:  IOCLR1=0X00020000;
 00000018  4800      LDR         R1,=0x20000
 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6001      STR         R1,[R0,#0x0]
   26:  IOSET1=(cc&0X00F00000);
 0000001E  1C21      MOV         R1,R4 ; cc
 00000020  4800      LDR         R0,=0xF00000
 00000022  4001      AND         R1,R0
 00000024  4800      LDR         R0,=0xE0028014
 00000026  6001      STR         R1,[R0,#0x0]
   27:  IOSET1=0X00080000;
 00000028  4800      LDR         R1,=0x80000
 0000002A  4800      LDR         R0,=0xE0028014
 0000002C  6001      STR         R1,[R0,#0x0]
   28:  delay_10us(20);
 0000002E  2014      MOV         R0,#0x14
 00000030  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000032  FFE6      BL          delay_10us?T  ; T=0x0001  (2)
   29:  IOCLR1=0X00080000;;
 00000034  4800      LDR         R1,=0x80000
 00000036  4800      LDR         R0,=0xE002801C
 00000038  6001      STR         R1,[R0,#0x0]
   30:  cc=c;
 0000003A  1C28      MOV         R0,R5 ; c
 0000003C  0604      LSL         R4,R0,#0x18 ; c
 0000003E  0E24      LSR         R4,R4,#0x18
   31:  cc=cc<<20;
 00000040  0524      LSL         R4,R4,#0x14 ; cc
   32:  IOCLR1=0X00F00000;
 00000042  4800      LDR         R2,=0xF00000
 00000044  4800      LDR         R0,=0xE002801C
 00000046  6002      STR         R2,[R0,#0x0]
   33:  IOCLR1=0X00040000;
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 8   

 00000048  4800      LDR         R2,=0x40000
 0000004A  4800      LDR         R0,=0xE002801C
 0000004C  6002      STR         R2,[R0,#0x0]
   34:  IOCLR1=0X00020000;
 0000004E  4800      LDR         R2,=0x20000
 00000050  4800      LDR         R0,=0xE002801C
 00000052  6002      STR         R2,[R0,#0x0]
   35:  IOSET1=(cc&0X00F00000);
 00000054  1C22      MOV         R2,R4 ; cc
 00000056  4800      LDR         R0,=0xF00000
 00000058  4002      AND         R2,R0
 0000005A  4800      LDR         R0,=0xE0028014
 0000005C  6002      STR         R2,[R0,#0x0]
   36:  IOSET1=0X00080000;
 0000005E  4800      LDR         R0,=0xE0028014
 00000060  6001      STR         R1,[R0,#0x0]
   37:  delay_10us(20);
 00000062  2014      MOV         R0,#0x14
 00000064  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000066  FFCC      BL          delay_10us?T  ; T=0x0001  (2)
   38:  IOCLR1=0X00080000;
 00000068  4800      LDR         R1,=0x80000
 0000006A  4800      LDR         R0,=0xE002801C
 0000006C  6001      STR         R1,[R0,#0x0]
 0000006E            ; SCOPE-END
   39: }
 0000006E  BC30      POP         {R4-R5}
 00000070  BC08      POP         {R3}
 00000072  4718      BX          R3
 00000074          ENDP ; 'command?T'


*** CODE SEGMENT '?PR?init_4bit_lcd?T?slave':
   44: void init_4bit_lcd(void)
 00000000  B500      PUSH        {LR}
   46:  IODIR1 |= 0X00FE0000; // P1.23 - P1.20 to D7 to D4
 00000002  4800      LDR         R2,=0xFE0000
 00000004  4800      LDR         R0,=0xE0028018
 00000006  6801      LDR         R1,[R0,#0x0]
 00000008  4311      ORR         R1,R2
 0000000A  6001      STR         R1,[R0,#0x0]
   50:  delay_ms(20);
 0000000C  2014      MOV         R0,#0x14
 0000000E  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000010  FFF7      BL          delay_ms?T  ; T=0x0001  (2)
   51:  command4bit(3);
 00000012  2003      MOV         R0,#0x3
 00000014  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000016  FFF4      BL          command4bit?T  ; T=0x0001  (2)
   52:  delay_ms(10);
 00000018  200A      MOV         R0,#0xA
 0000001A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          delay_ms?T  ; T=0x0001  (2)
   53:  command4bit(3);
 0000001E  2003      MOV         R0,#0x3
 00000020  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000022  FFEE      BL          command4bit?T  ; T=0x0001  (2)
   54:  delay_ms(10);
 00000024  200A      MOV         R0,#0xA
 00000026  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000028  FFEB      BL          delay_ms?T  ; T=0x0001  (2)
   55:   command4bit(3);
 0000002A  2003      MOV         R0,#0x3
 0000002C  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          command4bit?T  ; T=0x0001  (2)
   56:  delay_ms(10);
 00000030  200A      MOV         R0,#0xA
 00000032  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 9   

 00000034  FFE5      BL          delay_ms?T  ; T=0x0001  (2)
   57:   command4bit(2);
 00000036  2002      MOV         R0,#0x2
 00000038  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          command4bit?T  ; T=0x0001  (2)
   58:  delay_ms(10);
 0000003C  200A      MOV         R0,#0xA
 0000003E  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000040  FFDF      BL          delay_ms?T  ; T=0x0001  (2)
   59:  command(0X28);
 00000042  2028      MOV         R0,#0x28
 00000044  F7FF      BL          command?T  ; T=0x0001  (1)
 00000046  FFDC      BL          command?T  ; T=0x0001  (2)
   60:  delay_ms(10);
 00000048  200A      MOV         R0,#0xA
 0000004A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          delay_ms?T  ; T=0x0001  (2)
   61:  command(0X0E);
 0000004E  200E      MOV         R0,#0xE
 00000050  F7FF      BL          command?T  ; T=0x0001  (1)
 00000052  FFD6      BL          command?T  ; T=0x0001  (2)
   62:   delay_ms(5);
 00000054  2005      MOV         R0,#0x5
 00000056  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000058  FFD3      BL          delay_ms?T  ; T=0x0001  (2)
   63:  command(0X01);
 0000005A  2001      MOV         R0,#0x1
 0000005C  F7FF      BL          command?T  ; T=0x0001  (1)
 0000005E  FFD0      BL          command?T  ; T=0x0001  (2)
   64:   delay_ms(5);
 00000060  2005      MOV         R0,#0x5
 00000062  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000064  FFCD      BL          delay_ms?T  ; T=0x0001  (2)
   65:  command(0X06);
 00000066  2006      MOV         R0,#0x6
 00000068  F7FF      BL          command?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          command?T  ; T=0x0001  (2)
   66:   delay_ms(5);
 0000006C  2005      MOV         R0,#0x5
 0000006E  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000070  FFC7      BL          delay_ms?T  ; T=0x0001  (2)
   67:  command(0X80);
 00000072  2080      MOV         R0,#0x80
 00000074  F7FF      BL          command?T  ; T=0x0001  (1)
 00000076  FFC4      BL          command?T  ; T=0x0001  (2)
   68:   delay_ms(5);
 00000078  2005      MOV         R0,#0x5
 0000007A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000007C  FFC1      BL          delay_ms?T  ; T=0x0001  (2)
   69: }
 0000007E  BC08      POP         {R3}
 00000080  4718      BX          R3
 00000082          ENDP ; 'init_4bit_lcd?T'


*** CODE SEGMENT '?PR?display?T?slave':
   73: void display(char g)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; g
 00000004  ---- Variable 'g' assigned to Register 'R5' ----
   74: {
 00000004            ; SCOPE-START
   77:  delay_ms(1);
 00000004  2001      MOV         R0,#0x1
 00000006  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000008  FFFB      BL          delay_ms?T  ; T=0x0001  (2)
   78:  c=g;
 0000000A  1C28      MOV         R0,R5 ; g
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 10  

 0000000C  0604      LSL         R4,R0,#0x18 ; g
 0000000E  0E24      LSR         R4,R4,#0x18
 00000010  ---- Variable 'c' assigned to Register 'R4' ----
   79:  c=c<<16;
 00000010  0424      LSL         R4,R4,#0x10 ; c
   80:  IOCLR1=0X00F00000;
 00000012  4800      LDR         R1,=0xF00000
 00000014  4800      LDR         R0,=0xE002801C
 00000016  6001      STR         R1,[R0,#0x0]
   81:  IOCLR1=0X00040000;
 00000018  4800      LDR         R1,=0x40000
 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6001      STR         R1,[R0,#0x0]
   82:  IOSET1=0X00020000;
 0000001E  4800      LDR         R1,=0x20000
 00000020  4800      LDR         R0,=0xE0028014
 00000022  6001      STR         R1,[R0,#0x0]
   83:  IOSET1=(c&0X00F00000);
 00000024  1C21      MOV         R1,R4 ; c
 00000026  4800      LDR         R0,=0xF00000
 00000028  4001      AND         R1,R0
 0000002A  4800      LDR         R0,=0xE0028014
 0000002C  6001      STR         R1,[R0,#0x0]
   84:  IOSET1=0X00080000;
 0000002E  4800      LDR         R1,=0x80000
 00000030  4800      LDR         R0,=0xE0028014
 00000032  6001      STR         R1,[R0,#0x0]
   85:  delay_10us(20);
 00000034  2014      MOV         R0,#0x14
 00000036  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000038  FFE3      BL          delay_10us?T  ; T=0x0001  (2)
   86:  IOCLR1=0X00080000;
 0000003A  4800      LDR         R1,=0x80000
 0000003C  4800      LDR         R0,=0xE002801C
 0000003E  6001      STR         R1,[R0,#0x0]
   88:  c=g;
 00000040  1C28      MOV         R0,R5 ; g
 00000042  0604      LSL         R4,R0,#0x18 ; g
 00000044  0E24      LSR         R4,R4,#0x18
   89:  c=c<<20;
 00000046  0524      LSL         R4,R4,#0x14 ; c
   90:  IOCLR1=0X00F00000;
 00000048  4800      LDR         R2,=0xF00000
 0000004A  4800      LDR         R0,=0xE002801C
 0000004C  6002      STR         R2,[R0,#0x0]
   91:  IOCLR1=0X00040000;
 0000004E  4800      LDR         R2,=0x40000
 00000050  4800      LDR         R0,=0xE002801C
 00000052  6002      STR         R2,[R0,#0x0]
   92:  IOSET1=0X00020000;
 00000054  4800      LDR         R2,=0x20000
 00000056  4800      LDR         R0,=0xE0028014
 00000058  6002      STR         R2,[R0,#0x0]
   93:  IOSET1=(c&0X00F00000);
 0000005A  1C22      MOV         R2,R4 ; c
 0000005C  4800      LDR         R0,=0xF00000
 0000005E  4002      AND         R2,R0
 00000060  4800      LDR         R0,=0xE0028014
 00000062  6002      STR         R2,[R0,#0x0]
   94:  IOSET1=0X00080000;
 00000064  4800      LDR         R0,=0xE0028014
 00000066  6001      STR         R1,[R0,#0x0]
   95:  delay_10us(20);
 00000068  2014      MOV         R0,#0x14
 0000006A  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 0000006C  FFC9      BL          delay_10us?T  ; T=0x0001  (2)
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 11  

   96:  IOCLR1=0X00080000;
 0000006E  4800      LDR         R1,=0x80000
 00000070  4800      LDR         R0,=0xE002801C
 00000072  6001      STR         R1,[R0,#0x0]
 00000074            ; SCOPE-END
   97:  }
 00000074  BC30      POP         {R4-R5}
 00000076  BC08      POP         {R3}
 00000078  4718      BX          R3
 0000007A          ENDP ; 'display?T'


*** CODE SEGMENT '?PR?disp_string?T?slave':
   99:  void disp_string(char clr,char pos,char *dat)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C15      MOV         R5,R2 ; dat
 00000004  ---- Variable 'dat' assigned to Register 'R5' ----
 00000004  1C0C      MOV         R4,R1 ; pos
 00000006  ---- Variable 'pos' assigned to Register 'R4' ----
 00000006  1C01      MOV         R1,R0 ; clr
 00000008  ---- Variable 'clr' assigned to Register 'R1' ----
  100:  {
 00000008            ; SCOPE-START
  102:    if(clr==1)
 00000008  1C08      MOV         R0,R1 ; clr
 0000000A  0600      LSL         R0,R0,#0x18 ; clr
 0000000C  0E00      LSR         R0,R0,#0x18
 0000000E  2801      CMP         R0,#0x1
 00000010  D105      BNE         L_26  ; T=0x0000001E
  104:      command(0X01);
 00000012  2001      MOV         R0,#0x1
 00000014  F7FF      BL          command?T  ; T=0x0001  (1)
 00000016  FFF4      BL          command?T  ; T=0x0001  (2)
  105:      delay_ms(5);
 00000018  2005      MOV         R0,#0x5
 0000001A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          delay_ms?T  ; T=0x0001  (2)
  106:    }
 0000001E          L_26:
  107:      command(pos);
 0000001E  1C20      MOV         R0,R4 ; pos
 00000020  0600      LSL         R0,R0,#0x18 ; pos
 00000022  0E00      LSR         R0,R0,#0x18
 00000024  F7FF      BL          command?T  ; T=0x0001  (1)
 00000026  FFEC      BL          command?T  ; T=0x0001  (2)
  108:      for(i=0;dat[i]!='\0';i++)
 00000028  2400      MOV         R4,#0x0
 0000002A  ---- Variable 'i' assigned to Register 'R4' ----
 0000002A  E005      B           L_29  ; T=0x00000038
 0000002C          L_30:
  109:      display(dat[i]);
 0000002C  1C21      MOV         R1,R4 ; i
 0000002E  1C28      MOV         R0,R5 ; dat
 00000030  5C40      LDRB        R0,[R0,R1]
 00000032  F7FF      BL          display?T  ; T=0x0001  (1)
 00000034  FFE5      BL          display?T  ; T=0x0001  (2)
 00000036  3401      ADD         R4,#0x1
 00000038          L_29:
 00000038  1C21      MOV         R1,R4 ; i
 0000003A  1C28      MOV         R0,R5 ; dat
 0000003C  5C40      LDRB        R0,[R0,R1]
 0000003E  2800      CMP         R0,#0x0
 00000040  D1F4      BNE         L_30  ; T=0x0000002C
 00000042            ; SCOPE-END
  110: }
 00000042  BC30      POP         {R4-R5}
 00000044  BC08      POP         {R3}
 00000046  4718      BX          R3
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 12  

 00000048          ENDP ; 'disp_string?T'


*** CODE SEGMENT '?PR?Can_Init?T?slave':
    9: PINSEL1|= 0x15414000; 
 00000000  4800      LDR         R2,=0x15414000
 00000002  4800      LDR         R0,=0xE002C004
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4311      ORR         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
   10: PINSEL2|=  0x00000030;
 0000000A  2230      MOV         R2,#0x30
 0000000C  4800      LDR         R0,=0xE002C014
 0000000E  6801      LDR         R1,[R0,#0x0]
 00000010  4311      ORR         R1,R2
 00000012  6001      STR         R1,[R0,#0x0]
   14: C2MOD = 1; // Enter Reset Mode
 00000014  2101      MOV         R1,#0x1
 00000016  4800      LDR         R0,=0xE0048000
 00000018  6001      STR         R1,[R0,#0x0]
   15: C2GSR = 0; // Clear status register
 0000001A  2100      MOV         R1,#0x0
 0000001C  4800      LDR         R0,=0xE0048008
 0000001E  6001      STR         R1,[R0,#0x0]
   16: C2BTR = 0x001C001D; // Set bit timing
 00000020  4800      LDR         R2,=0x1C001D
 00000022  4800      LDR         R0,=0xE0048014
 00000024  6002      STR         R2,[R0,#0x0]
   19: C2IER = 0;
 00000026  4800      LDR         R0,=0xE0048010
 00000028  6001      STR         R1,[R0,#0x0]
   22: C2MOD = 0; // Operating Mode 
 0000002A  4800      LDR         R0,=0xE0048000
 0000002C  6001      STR         R1,[R0,#0x0]
   24: return 0;
 0000002E  2000      MOV         R0,#0x0
   25: }
 00000030  4770      BX          R14
 00000032          ENDP ; 'Can_Init?T'


*** CODE SEGMENT '?PR?send_remote_frame?T?slave':
   28: void send_remote_frame(unsigned int x)
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable 'x' assigned to Register 'R0' ----
 00000002  B082      SUB         R13,#0x8
   29: {
 00000004            ; SCOPE-START
   31: while((C2SR & 0x00000004) != 0x00000004);
 00000004          L_33:
 00000004  4800      LDR         R1,=0xE004801C
 00000006  6809      LDR         R1,[R1,#0x0]
 00000008  2204      MOV         R2,#0x4
 0000000A  4211      TST         R1,R2
 0000000C  D0FA      BEQ         L_33  ; T=0x00000004
   32: C2TFI1 = 0x40010000; //RTR bit high
 0000000E  4800      LDR         R2,=0x40010000
 00000010  4800      LDR         R1,=0xE0048030
 00000012  600A      STR         R2,[R1,#0x0]
   33: C2TID1 = x;
 00000014  1C01      MOV         R1,R0 ; x
 00000016  4800      LDR         R0,=0xE0048034
 00000018  6001      STR         R1,[R0,#0x0]
   34: C2TDA1 = DatA;
 0000001A  9900      LDR         R1,[R13,#0x0] ; DatA
 0000001C  4800      LDR         R0,=0xE0048038
 0000001E  6001      STR         R1,[R0,#0x0]
   35: C2TDB1 = DatB;
 00000020  9901      LDR         R1,[R13,#0x4] ; DatB
 00000022  4800      LDR         R0,=0xE004803C
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 13  

 00000024  6001      STR         R1,[R0,#0x0]
   36: C2CMR = 0x21;
 00000026  2121      MOV         R1,#0x21
 00000028  4800      LDR         R0,=0xE0048004
 0000002A  6001      STR         R1,[R0,#0x0]
   38: while((C2GSR & 0x00000008) != 0x00000008);
 0000002C          L_37:
 0000002C  4800      LDR         R0,=0xE0048008
 0000002E  6800      LDR         R0,[R0,#0x0]
 00000030  2108      MOV         R1,#0x8
 00000032  4208      TST         R0,R1
 00000034  D0FA      BEQ         L_37  ; T=0x0000002C
   39: C2CMR = 0x00; 
 00000036  2100      MOV         R1,#0x0
 00000038  4800      LDR         R0,=0xE0048004
 0000003A  6001      STR         R1,[R0,#0x0]
   40: disp_string(1,0x80,"Remt fram snt");
 0000003C  4800      LDR         R2,=??S_1 ; ??S_1
 0000003E  2001      MOV         R0,#0x1
 00000040  2180      MOV         R1,#0x80
 00000042  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 00000044  FFDD      BL          disp_string?T  ; T=0x0001  (2)
 00000046            ; SCOPE-END
   41: }
 00000046  B002      ADD         R13,#0x8
 00000048  BC08      POP         {R3}
 0000004A  4718      BX          R3
 0000004C          ENDP ; 'send_remote_frame?T'


*** CODE SEGMENT '?PR?Wait_for_data_frame?T?slave':
   47: {
 00000000            ; SCOPE-START
   48: unsigned int CANIDnew=0, DatA,DatB;
 00000000  2100      MOV         R1,#0x0
 00000002  ---- Variable 'CANIDnew' assigned to Register 'R1' ----
   51: while( (C2GSR & 0x10)==0x10) ;  //wait until receiving complete.
 00000002          L_41:
 00000002  4800      LDR         R0,=0xE0048008
 00000004  6800      LDR         R0,[R0,#0x0]
 00000006  2210      MOV         R2,#0x10
 00000008  4210      TST         R0,R2
 0000000A  D1FA      BNE         L_41  ; T=0x00000002
   54: CANIDnew=C2RID;
 0000000C  4800      LDR         R0,=0xE0048024
 0000000E  6801      LDR         R1,[R0,#0x0]
   56: if(CANIDnew==(0x000000AB))
 00000010  1C08      MOV         R0,R1 ; CANIDnew
 00000012  28AB      CMP         R0,#0xAB ; CANIDnew
 00000014  D108      BNE         L_45  ; T=0x00000028
   59: DatA=C2RDA;
 00000016  4800      LDR         R0,=0xE0048028
 00000018  6801      LDR         R1,[R0,#0x0]
 0000001A  ---- Variable 'DatA' assigned to Register 'R1' ----
   60: DatB=C2RDB;
 0000001A  4800      LDR         R0,=0xE004802C
 0000001C  6800      LDR         R0,[R0,#0x0]
   62: C2CMR = 0x00000004; //release receiver
 0000001E  2204      MOV         R2,#0x4
 00000020  4800      LDR         R0,=0xE0048004
 00000022  6002      STR         R2,[R0,#0x0]
   63: return(DatA);
 00000024  1C08      MOV         R0,R1 ; DatA
 00000026  E000      B           L_46  ; T=0x0000002A
   64: }
 00000028          L_45:
   65: return 0;       
 00000028  2000      MOV         R0,#0x0
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 14  

 0000002A            ; SCOPE-END
   66: }
 0000002A          L_46:
 0000002A  4770      BX          R14
 0000002C          ENDP ; 'Wait_for_data_frame?T'


*** CODE SEGMENT '?PR?Wait_for_remote_frame?T?slave':
   72: char Wait_for_remote_frame(void)
 00000000  B510      PUSH        {R4,LR}
   73: {
 00000002            ; SCOPE-START
   74: unsigned int CANIDnew=0,DatB,DatA;
 00000002  2400      MOV         R4,#0x0
 00000004  ---- Variable 'CANIDnew' assigned to Register 'R4' ----
   75: disp_string(1,0x80,"in loop");
 00000004  4800      LDR         R2,=??S_2 ; ??S_2
 00000006  2001      MOV         R0,#0x1
 00000008  2180      MOV         R1,#0x80
 0000000A  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          disp_string?T  ; T=0x0001  (2)
   78: while( ( (C2GSR & 0x00000010)==0x00000010) );   //wait until receiving complete.
 0000000E          L_54:
 0000000E          L_51:
 0000000E  4800      LDR         R0,=0xE0048008
 00000010  6800      LDR         R0,[R0,#0x0]
 00000012  2110      MOV         R1,#0x10
 00000014  4208      TST         R0,R1
 00000016  D1FA      BNE         L_51  ; T=0x0000000E
   80: if((C2RFS & 0x40000000)==0x40000000)    //RTR == 1 remote frame
 00000018  4800      LDR         R0,=0xE0048020
 0000001A  6800      LDR         R0,[R0,#0x0]
 0000001C  4800      LDR         R1,=0x40000000
 0000001E  4008      AND         R0,R1
 00000020  4800      LDR         R1,=0xC0000000
 00000022  42C8      CMN         R0,R1
 00000024  D112      BNE         L_59  ; T=0x0000004C
   82: CANIDnew=C2RID;
 00000026  4800      LDR         R0,=0xE0048024
 00000028  6804      LDR         R4,[R0,#0x0]
   84: if(CANIDnew==(0x000000CF))
 0000002A  1C20      MOV         R0,R4 ; CANIDnew
 0000002C  28CF      CMP         R0,#0xCF ; CANIDnew
 0000002E  D108      BNE         L_56  ; T=0x00000042
   87: DatA=C2RDA;
 00000030  4800      LDR         R0,=0xE0048028
 00000032  6800      LDR         R0,[R0,#0x0]
   88: DatB=C2RDB;
 00000034  4800      LDR         R0,=0xE004802C
 00000036  6800      LDR         R0,[R0,#0x0]
   89: C2CMR = 0x00000004; //release receiver
 00000038  2104      MOV         R1,#0x4
 0000003A  4800      LDR         R0,=0xE0048004
 0000003C  6001      STR         R1,[R0,#0x0]
   90: return(1);
 0000003E  2001      MOV         R0,#0x1
 00000040  E008      B           L_57  ; T=0x00000054
   91: }
 00000042          L_56:
   93:         C2CMR = 0x00000004; 
 00000042  2104      MOV         R1,#0x4
 00000044  4800      LDR         R0,=0xE0048004
 00000046  6001      STR         R1,[R0,#0x0]
   94:         return(0);
 00000048  2000      MOV         R0,#0x0
 0000004A  E003      B           L_57  ; T=0x00000054
   97:         else;
 0000004C          L_59:
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 15  

   98:         C2CMR = 0x00000004; //release receiver
 0000004C  2204      MOV         R2,#0x4
 0000004E  4800      LDR         R1,=0xE0048004
 00000050  600A      STR         R2,[R1,#0x0]
   99: }
 00000052  E7DC      B           L_54  ; T=0x0000000E
 00000054            ; SCOPE-END
  101: }
 00000054          L_57:
 00000054  BC10      POP         {R4}
 00000056  BC08      POP         {R3}
 00000058  4718      BX          R3
 0000005A          ENDP ; 'Wait_for_remote_frame?T'


*** CODE SEGMENT '?PR?SendMessage2?T?slave':
  104: void SendMessage2(unsigned int x,unsigned int y,unsigned int z)
 00000000  B410      PUSH        {R4}
 00000002  1C13      MOV         R3,R2 ; z
 00000004  ---- Variable 'z' assigned to Register 'R3' ----
 00000004  ---- Variable 'y' assigned to Register 'R1' ----
 00000004  ---- Variable 'x' assigned to Register 'R0' ----
  105: {
 00000004            ; SCOPE-START
  108: while((C2SR & 0x00000004)!=0x00000004);
 00000004          L_60:
 00000004  4800      LDR         R2,=0xE004801C
 00000006  6812      LDR         R2,[R2,#0x0]
 00000008  2404      MOV         R4,#0x4
 0000000A  4222      TST         R2,R4
 0000000C  D0FA      BEQ         L_60  ; T=0x00000004
  110: C2TFI2 = 0x00080000; 
 0000000E  4800      LDR         R4,=0x80000
 00000010  4800      LDR         R2,=0xE0048040
 00000012  6014      STR         R4,[R2,#0x0]
  111: C2TDA2 = y;
 00000014  1C0A      MOV         R2,R1 ; y
 00000016  4800      LDR         R1,=0xE0048048
 00000018  600A      STR         R2,[R1,#0x0]
  112: C2TDB2 = z;
 0000001A  1C1A      MOV         R2,R3 ; z
 0000001C  4800      LDR         R1,=0xE004804C
 0000001E  600A      STR         R2,[R1,#0x0]
  113: C2TID2 = x;
 00000020  1C01      MOV         R1,R0 ; x
 00000022  4800      LDR         R0,=0xE0048044
 00000024  6001      STR         R1,[R0,#0x0]
  116: C2CMR = 0x41;
 00000026  2141      MOV         R1,#0x41
 00000028  4800      LDR         R0,=0xE0048004
 0000002A  6001      STR         R1,[R0,#0x0]
  118: status = C2GSR; 
 0000002C  4800      LDR         R0,=0xE0048008
 0000002E  6800      LDR         R0,[R0,#0x0]
 00000030  ---- Variable 'status' assigned to Register 'R0' ----
  119: while((status & 0x00000008) != 0x00000008)
 00000030  E001      B           L_64  ; T=0x00000036
 00000032          L_66:
  120: status = C2GSR; 
 00000032  4800      LDR         R0,=0xE0048008
 00000034  6800      LDR         R0,[R0,#0x0]
 00000036          L_64:
 00000036  1C01      MOV         R1,R0 ; status
 00000038  2208      MOV         R2,#0x8
 0000003A  4211      TST         R1,R2 ; status
 0000003C  D0F9      BEQ         L_66  ; T=0x00000032
  121: C2CMR=0X00;
 0000003E  2100      MOV         R1,#0x0
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 16  

 00000040  4800      LDR         R0,=0xE0048004
 00000042  6001      STR         R1,[R0,#0x0]
 00000044            ; SCOPE-END
  125: }
 00000044  BC10      POP         {R4}
 00000046  4770      BX          R14
 00000048          ENDP ; 'SendMessage2?T'


*** CODE SEGMENT '?PR?SendMessage1?T?slave':
  126: void SendMessage1(unsigned int x,unsigned int a,unsigned int b,unsigned int c,unsigned int d)
 00000000  B430      PUSH        {R4-R5}
 00000002  ---- Variable 'c' assigned to Register 'R3' ----
 00000002  1C14      MOV         R4,R2 ; b
 00000004  ---- Variable 'b' assigned to Register 'R4' ----
 00000004  ---- Variable 'a' assigned to Register 'R1' ----
 00000004  ---- Variable 'x' assigned to Register 'R0' ----
  127: {
 00000004            ; SCOPE-START
  130: while((C2SR & 0x00000004)!=0x00000004);
 00000004          L_68:
 00000004  4800      LDR         R2,=0xE004801C
 00000006  6812      LDR         R2,[R2,#0x0]
 00000008  2504      MOV         R5,#0x4
 0000000A  422A      TST         R2,R5
 0000000C  D0FA      BEQ         L_68  ; T=0x00000004
  132: C2TFI1 = 0x00080000; 
 0000000E  4800      LDR         R5,=0x80000
 00000010  4800      LDR         R2,=0xE0048030
 00000012  6015      STR         R5,[R2,#0x0]
  133: C2TDA1 = (a<<16)|b;
 00000014  1C0A      MOV         R2,R1 ; a
 00000016  0412      LSL         R2,R2,#0x10 ; a
 00000018  1C21      MOV         R1,R4 ; b
 0000001A  430A      ORR         R2,R1 ; b
 0000001C  4800      LDR         R1,=0xE0048038
 0000001E  600A      STR         R2,[R1,#0x0]
  134: C2TDB1 = (c<<16)|d;
 00000020  1C1A      MOV         R2,R3 ; c
 00000022  0412      LSL         R2,R2,#0x10 ; c
 00000024  9900      LDR         R1,[R13,#0x0] ; d
 00000026  430A      ORR         R2,R1
 00000028  4800      LDR         R1,=0xE004803C
 0000002A  600A      STR         R2,[R1,#0x0]
  135: C2TID1 = x;
 0000002C  1C01      MOV         R1,R0 ; x
 0000002E  4800      LDR         R0,=0xE0048034
 00000030  6001      STR         R1,[R0,#0x0]
  138: C2CMR = 0x21;
 00000032  2121      MOV         R1,#0x21
 00000034  4800      LDR         R0,=0xE0048004
 00000036  6001      STR         R1,[R0,#0x0]
  140: status = C2GSR; 
 00000038  4800      LDR         R0,=0xE0048008
 0000003A  6800      LDR         R0,[R0,#0x0]
 0000003C  ---- Variable 'status' assigned to Register 'R0' ----
  141: while((status & 0x00000008) != 0x00000008)
 0000003C  E001      B           L_72  ; T=0x00000042
 0000003E          L_74:
  142: status = C2GSR; 
 0000003E  4800      LDR         R0,=0xE0048008
 00000040  6800      LDR         R0,[R0,#0x0]
 00000042          L_72:
 00000042  1C01      MOV         R1,R0 ; status
 00000044  2208      MOV         R2,#0x8
 00000046  4211      TST         R1,R2 ; status
 00000048  D0F9      BEQ         L_74  ; T=0x0000003E
  144: C2CMR=0X00;
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 17  

 0000004A  2100      MOV         R1,#0x0
 0000004C  4800      LDR         R0,=0xE0048004
 0000004E  6001      STR         R1,[R0,#0x0]
 00000050            ; SCOPE-END
  145: }
 00000050  BC30      POP         {R4-R5}
 00000052  4770      BX          R14
 00000054          ENDP ; 'SendMessage1?T'


*** CODE SEGMENT '?PR?ReceiveMessage?T?slave':
  148: int ReceiveMessage (void)
 00000000  B500      PUSH        {LR}
 00000002  B081      SUB         R13,#0x4
  149: {
 00000004            ; SCOPE-START
  153: len = C2RFS;
 00000004  4800      LDR         R0,=0xE0048020
 00000006  6800      LDR         R0,[R0,#0x0]
  154: id = C2RID;
 00000008  4800      LDR         R0,=0xE0048024
 0000000A  6801      LDR         R1,[R0,#0x0]
 0000000C  ---- Variable 'id' assigned to Register 'R1' ----
  155: data = C2RDA;
 0000000C  4800      LDR         R0,=0xE0048028
 0000000E  6802      LDR         R2,[R0,#0x0]
 00000010  0612      LSL         R2,R2,#0x18
 00000012  0E12      LSR         R2,R2,#0x18
 00000014  A800      ADD         R0,R13,#0x0
 00000016  7002      STRB        R2,[R0,#0x0] ; data
  156: if(id == 0x000000CF) {
 00000018  1C08      MOV         R0,R1 ; id
 0000001A  28CF      CMP         R0,#0xCF ; id
 0000001C  D10A      BNE         L_76  ; T=0x00000034
  157: disp_string(0,0x80,"correct");
 0000001E  4800      LDR         R2,=??S_3 ; ??S_3
 00000020  2000      MOV         R0,#0x0
 00000022  2180      MOV         R1,#0x80
 00000024  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          disp_string?T  ; T=0x0001  (2)
  158: disp_string(0,0xc0,&data);
 00000028  AA00      ADD         R2,R13,#0x0
 0000002A  2000      MOV         R0,#0x0
 0000002C  21C0      MOV         R1,#0xC0
 0000002E  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 00000030  FFE7      BL          disp_string?T  ; T=0x0001  (2)
  160: }
 00000032  E004      B           L_77  ; T=0x0000003E
 00000034          L_76:
  163: disp_string(1,0x80,"wrong");
 00000034  4800      LDR         R2,=??S_4 ; ??S_4
 00000036  2001      MOV         R0,#0x1
 00000038  2180      MOV         R1,#0x80
 0000003A  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          disp_string?T  ; T=0x0001  (2)
  164: }
 0000003E          L_77:
  165: C2CMR = 0x04;   
 0000003E  2104      MOV         R1,#0x4
 00000040  4800      LDR         R0,=0xE0048004
 00000042  6001      STR         R1,[R0,#0x0]
  166: return 0;
 00000044  2000      MOV         R0,#0x0
 00000046            ; SCOPE-END
  168: }
 00000046  B001      ADD         R13,#0x4
 00000048  BC08      POP         {R3}
 0000004A  4718      BX          R3
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 18  

 0000004C          ENDP ; 'ReceiveMessage?T'


*** CODE SEGMENT '?PR?Init_UART0?T?slave':
    5: PINSEL0&=0xFFFFFFF0;
 00000000  220F      MOV         R2,#0xF
 00000002  4800      LDR         R0,=0xE002C000
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4391      BIC         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
    6: PINSEL0|=0x00000005;
 0000000A  2205      MOV         R2,#0x5
 0000000C  4800      LDR         R0,=0xE002C000
 0000000E  6801      LDR         R1,[R0,#0x0]
 00000010  4311      ORR         R1,R2
 00000012  6001      STR         R1,[R0,#0x0]
    7: U0LCR=0x83;
 00000014  2183      MOV         R1,#0x83
 00000016  4800      LDR         R0,=0xE000C00C
 00000018  7001      STRB        R1,[R0,#0x0]
    8: U0DLL=0x51; //97
 0000001A  2151      MOV         R1,#0x51
 0000001C  4800      LDR         R0,=0xE000C000
 0000001E  7001      STRB        R1,[R0,#0x0]
    9: U0DLM=0x00;
 00000020  2100      MOV         R1,#0x0
 00000022  4800      LDR         R0,=0xE000C004
 00000024  7001      STRB        R1,[R0,#0x0]
   10: U0LCR=0x03;
 00000026  2103      MOV         R1,#0x3
 00000028  4800      LDR         R0,=0xE000C00C
 0000002A  7001      STRB        R1,[R0,#0x0]
   11: U0FCR=0x01;
 0000002C  2101      MOV         R1,#0x1
 0000002E  4800      LDR         R0,=0xE000C008
 00000030  7001      STRB        R1,[R0,#0x0]
   12: }
 00000032  4770      BX          R14
 00000034          ENDP ; 'Init_UART0?T'


*** CODE SEGMENT '?PR?Init_UART1?T?slave':
   16: PINSEL0&=0xFFF0FFFF;
 00000000  4800      LDR         R2,=0xF0000
 00000002  4800      LDR         R0,=0xE002C000
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4391      BIC         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
   17: PINSEL0|=0x00050000;
 0000000A  4800      LDR         R2,=0x50000
 0000000C  4800      LDR         R0,=0xE002C000
 0000000E  6801      LDR         R1,[R0,#0x0]
 00000010  4311      ORR         R1,R2
 00000012  6001      STR         R1,[R0,#0x0]
   18: U1LCR=0x83;
 00000014  2183      MOV         R1,#0x83
 00000016  4800      LDR         R0,=0xE001000C
 00000018  7001      STRB        R1,[R0,#0x0]
   19: U1DLL=0x51; //97
 0000001A  2151      MOV         R1,#0x51
 0000001C  4800      LDR         R0,=0xE0010000
 0000001E  7001      STRB        R1,[R0,#0x0]
   20: U1DLM=0x00;
 00000020  2100      MOV         R1,#0x0
 00000022  4800      LDR         R0,=0xE0010004
 00000024  7001      STRB        R1,[R0,#0x0]
   21: U1LCR=0x03;
 00000026  2103      MOV         R1,#0x3
 00000028  4800      LDR         R0,=0xE001000C
 0000002A  7001      STRB        R1,[R0,#0x0]
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 19  

   22: U1FCR=0x01;
 0000002C  2101      MOV         R1,#0x1
 0000002E  4800      LDR         R0,=0xE0010008
 00000030  7001      STRB        R1,[R0,#0x0]
   23: } 
 00000032  4770      BX          R14
 00000034          ENDP ; 'Init_UART1?T'


*** CODE SEGMENT '?PR?read_byte_u1?T?slave':
   26: {
 00000000            ; SCOPE-START
   28: while((U1LSR&0x01)==0x00);
 00000000          L_79:
 00000000  4800      LDR         R0,=0xE0010014
 00000002  7800      LDRB        R0,[R0,#0x0]
 00000004  2101      MOV         R1,#0x1
 00000006  4208      TST         R0,R1
 00000008  D0FA      BEQ         L_79  ; T=0x00000000
   29: rec=U1RBR;
 0000000A  4800      LDR         R0,=0xE0010000
 0000000C  7801      LDRB        R1,[R0,#0x0]
 0000000E  ---- Variable 'rec' assigned to Register 'R1' ----
   30: return(rec);
 0000000E  1C08      MOV         R0,R1 ; rec
 00000010  0600      LSL         R0,R0,#0x18 ; rec
 00000012  0E00      LSR         R0,R0,#0x18
 00000014            ; SCOPE-END
   31: }
 00000014  4770      BX          R14
 00000016          ENDP ; 'read_byte_u1?T'


*** CODE SEGMENT '?PR?read_byte_u0?T?slave':
   34: {
 00000000            ; SCOPE-START
   36: while((U0LSR&0x01)==0x00);
 00000000          L_84:
 00000000  4800      LDR         R0,=0xE000C014
 00000002  7800      LDRB        R0,[R0,#0x0]
 00000004  2101      MOV         R1,#0x1
 00000006  4208      TST         R0,R1
 00000008  D0FA      BEQ         L_84  ; T=0x00000000
   37: rec=U0RBR;
 0000000A  4800      LDR         R0,=0xE000C000
 0000000C  7801      LDRB        R1,[R0,#0x0]
 0000000E  ---- Variable 'rec' assigned to Register 'R1' ----
   38: return(rec);
 0000000E  1C08      MOV         R0,R1 ; rec
 00000010  0600      LSL         R0,R0,#0x18 ; rec
 00000012  0E00      LSR         R0,R0,#0x18
 00000014            ; SCOPE-END
   39: }
 00000014  4770      BX          R14
 00000016          ENDP ; 'read_byte_u0?T'


*** CODE SEGMENT '?PR?send_byte_u0?T?slave':
   42: void send_byte_u0(char snd)
 00000000  1C02      MOV         R2,R0 ; snd
 00000002  ---- Variable 'snd' assigned to Register 'R2' ----
   44: U0THR=snd;
 00000002  1C11      MOV         R1,R2 ; snd
 00000004  4800      LDR         R0,=0xE000C000
 00000006  7001      STRB        R1,[R0,#0x0]
   45: while((U0LSR&0x40)==0);
 00000008          L_89:
 00000008  4800      LDR         R0,=0xE000C014
 0000000A  7800      LDRB        R0,[R0,#0x0]
 0000000C  2140      MOV         R1,#0x40
 0000000E  4208      TST         R0,R1
 00000010  D0FA      BEQ         L_89  ; T=0x00000008
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 20  

   46: }
 00000012  4770      BX          R14
 00000014          ENDP ; 'send_byte_u0?T'


*** CODE SEGMENT '?PR?send_wait_u0?T?slave':
   49: char send_wait_u0(char snd,char rec1,char rec2)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C17      MOV         R7,R2 ; rec2
 00000004  ---- Variable 'rec2' assigned to Register 'R7' ----
 00000004  1C0E      MOV         R6,R1 ; rec1
 00000006  ---- Variable 'rec1' assigned to Register 'R6' ----
 00000006  1C05      MOV         R5,R0 ; snd
 00000008  ---- Variable 'snd' assigned to Register 'R5' ----
 00000008  B081      SUB         R13,#0x4
 0000000A  ---- Variable 'tst' assigned to Register 'R4' ----
   50: {
 0000000A            ; SCOPE-START
   54: while(1)
 0000000A          L_95:
   57: U0THR=snd;
 0000000A  1C29      MOV         R1,R5 ; snd
 0000000C  4800      LDR         R0,=0xE000C000
 0000000E  7001      STRB        R1,[R0,#0x0]
   58: while((U0LSR&0x40)==0);
 00000010          L_97:
 00000010  4800      LDR         R0,=0xE000C014
 00000012  7800      LDRB        R0,[R0,#0x0]
 00000014  2140      MOV         R1,#0x40
 00000016  4208      TST         R0,R1
 00000018  D0FA      BEQ         L_97  ; T=0x00000010
   59: i=0;
 0000001A  2000      MOV         R0,#0x0
 0000001C  9000      STR         R0,[R13,#0x0] ; i
   61: do
 0000001E          L_101:
   64: if((U0LSR&0x01)==0x01)
 0000001E  4800      LDR         R0,=0xE000C014
 00000020  7800      LDRB        R0,[R0,#0x0]
 00000022  2101      MOV         R1,#0x1
 00000024  4008      AND         R0,R1
 00000026  2801      CMP         R0,#0x1
 00000028  D101      BNE         L_105  ; T=0x0000002E
   66: tst=U0RBR;
 0000002A  4800      LDR         R0,=0xE000C000
 0000002C  7804      LDRB        R4,[R0,#0x0]
   67: }
 0000002E          L_105:
   68: delay_10us(50);
 0000002E  2032      MOV         R0,#0x32
 00000030  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000032  FFE6      BL          delay_10us?T  ; T=0x0001  (2)
   69: i++;
 00000034  9800      LDR         R0,[R13,#0x0] ; i
 00000036  3001      ADD         R0,#0x1
 00000038  9000      STR         R0,[R13,#0x0] ; i
   71: }
 0000003A  1C30      MOV         R0,R6 ; rec1
 0000003C  0601      LSL         R1,R0,#0x18 ; rec1
 0000003E  0E09      LSR         R1,R1,#0x18
 00000040  1C20      MOV         R0,R4 ; tst
 00000042  0600      LSL         R0,R0,#0x18 ; tst
 00000044  0E00      LSR         R0,R0,#0x18
 00000046  4288      CMP         R0,R1
 00000048  D00B      BEQ         L_104  ; T=0x00000062
 0000004A  1C38      MOV         R0,R7 ; rec2
 0000004C  0601      LSL         R1,R0,#0x18 ; rec2
 0000004E  0E09      LSR         R1,R1,#0x18
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 21  

 00000050  1C20      MOV         R0,R4 ; tst
 00000052  0600      LSL         R0,R0,#0x18 ; tst
 00000054  0E00      LSR         R0,R0,#0x18
 00000056  4288      CMP         R0,R1
 00000058  D003      BEQ         L_104  ; T=0x00000062
 0000005A  9800      LDR         R0,[R13,#0x0] ; i
 0000005C  4800      LDR         R1,=0x7D0
 0000005E  4288      CMP         R0,R1
 00000060  D3DD      BCC         L_101  ; T=0x0000001E
 00000062          L_104:
   74: if( ( (tst==rec1)||(tst==rec2) ) )
 00000062  1C30      MOV         R0,R6 ; rec1
 00000064  0601      LSL         R1,R0,#0x18 ; rec1
 00000066  0E09      LSR         R1,R1,#0x18
 00000068  1C20      MOV         R0,R4 ; tst
 0000006A  0600      LSL         R0,R0,#0x18 ; tst
 0000006C  0E00      LSR         R0,R0,#0x18
 0000006E  4288      CMP         R0,R1
 00000070  D007      BEQ         L_94  ; T=0x00000082
 00000072  1C38      MOV         R0,R7 ; rec2
 00000074  0601      LSL         R1,R0,#0x18 ; rec2
 00000076  0E09      LSR         R1,R1,#0x18
 00000078  1C20      MOV         R0,R4 ; tst
 0000007A  0600      LSL         R0,R0,#0x18 ; tst
 0000007C  0E00      LSR         R0,R0,#0x18
 0000007E  4288      CMP         R0,R1
 00000080  D1C3      BNE         L_95  ; T=0x0000000A
   76: }
 00000082          L_94:
   78: return(tst);
 00000082  1C20      MOV         R0,R4 ; tst
 00000084  0600      LSL         R0,R0,#0x18 ; tst
 00000086  0E00      LSR         R0,R0,#0x18
 00000088            ; SCOPE-END
   79: }
 00000088  B001      ADD         R13,#0x4
 0000008A  BCF0      POP         {R4-R7}
 0000008C  BC08      POP         {R3}
 0000008E  4718      BX          R3
 00000090          ENDP ; 'send_wait_u0?T'


*** CODE SEGMENT '?PR?send_string_u0?T?slave':
   81: void send_string_u0(char *ptr)
 00000000  ---- Variable 'ptr' assigned to Register 'R0' ----
   82: {
 00000000            ; SCOPE-START
   84: for(i=0;ptr[i]!='\0';i++)
 00000000  2100      MOV         R1,#0x0
 00000002  ---- Variable 'i' assigned to Register 'R1' ----
 00000002  E00A      B           L_112  ; T=0x0000001A
 00000004          L_113:
   86:  U0THR=ptr[i];
 00000004  1C0B      MOV         R3,R1 ; i
 00000006  1C02      MOV         R2,R0 ; ptr
 00000008  5CD3      LDRB        R3,[R2,R3]
 0000000A  4800      LDR         R2,=0xE000C000
 0000000C  7013      STRB        R3,[R2,#0x0]
   87: while((U0LSR&0x40)==0);
 0000000E          L_115:
 0000000E  4800      LDR         R2,=0xE000C014
 00000010  7812      LDRB        R2,[R2,#0x0]
 00000012  2340      MOV         R3,#0x40
 00000014  421A      TST         R2,R3
 00000016  D0FA      BEQ         L_115  ; T=0x0000000E
   88: }
 00000018  3101      ADD         R1,#0x1
 0000001A          L_112:
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 22  

 0000001A  1C0B      MOV         R3,R1 ; i
 0000001C  1C02      MOV         R2,R0 ; ptr
 0000001E  5CD2      LDRB        R2,[R2,R3]
 00000020  2A00      CMP         R2,#0x0
 00000022  D1EF      BNE         L_113  ; T=0x00000004
 00000024            ; SCOPE-END
   89: }
 00000024  4770      BX          R14
 00000026          ENDP ; 'send_string_u0?T'


*** CODE SEGMENT '?PR?clear_buffer_u1?T?slave':
   91: void clear_buffer_u1(void)
 00000000  B500      PUSH        {LR}
   93: U1FCR|=0x02; //reset rx fifo. this bit becomes zero after cleareing the buffer
 00000002  2202      MOV         R2,#0x2
 00000004  4800      LDR         R0,=0xE0010008
 00000006  7801      LDRB        R1,[R0,#0x0]
 00000008  4311      ORR         R1,R2
 0000000A  7001      STRB        R1,[R0,#0x0]
   94: while( ( (U1FCR&0x02)==0x02) );
 0000000C          L_119:
 0000000C  4800      LDR         R0,=0xE0010008
 0000000E  7800      LDRB        R0,[R0,#0x0]
 00000010  2102      MOV         R1,#0x2
 00000012  4208      TST         R0,R1
 00000014  D1FA      BNE         L_119  ; T=0x0000000C
   95: delay_ms(5);
 00000016  2005      MOV         R0,#0x5
 00000018  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          delay_ms?T  ; T=0x0001  (2)
   96: }
 0000001C  BC08      POP         {R3}
 0000001E  4718      BX          R3
 00000020          ENDP ; 'clear_buffer_u1?T'


*** CODE SEGMENT '?PR?clear_buffer_u0?T?slave':
   98: void clear_buffer_u0(void)
 00000000  B500      PUSH        {LR}
  100: U0FCR|=0x02; //reset rx fifo. this bit becomes zero after cleareing the buffer
 00000002  2202      MOV         R2,#0x2
 00000004  4800      LDR         R0,=0xE000C008
 00000006  7801      LDRB        R1,[R0,#0x0]
 00000008  4311      ORR         R1,R2
 0000000A  7001      STRB        R1,[R0,#0x0]
  101: delay_ms(5);
 0000000C  2005      MOV         R0,#0x5
 0000000E  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000010  FFF7      BL          delay_ms?T  ; T=0x0001  (2)
 00000012  BC08      POP         {R3}
 00000014  4718      BX          R3
 00000016          ENDP ; 'clear_buffer_u0?T'


*** CODE SEGMENT '?PR?init_ADC?T?slave':
    3: PINSEL1|=0x00400000;
 00000000  4800      LDR         R2,=0x400000
 00000002  4800      LDR         R0,=0xE002C004
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4311      ORR         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
    4: ADCR=0x00200201;    //adc clock=PCLK/(2+1),  no burst mode, ADC enabled
 0000000A  4800      LDR         R1,=0x200201
 0000000C  4800      LDR         R0,=0xE0034000
 0000000E  6001      STR         R1,[R0,#0x0]
    5: }
 00000010  4770      BX          R14
 00000012          ENDP ; 'init_ADC?T'


*** CODE SEGMENT '?PR?init_ADC1?T?slave':
    9: PINSEL1|=0x01000000;
 00000000  4800      LDR         R2,=0x1000000
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 23  

 00000002  4800      LDR         R0,=0xE002C004
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4311      ORR         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
   10: ADCR=0x00200202;    //adc clock=PCLK/(2+1),  no burst mode, ADC enabled
 0000000A  4800      LDR         R1,=0x200202
 0000000C  4800      LDR         R0,=0xE0034000
 0000000E  6001      STR         R1,[R0,#0x0]
   11: }
 00000010  4770      BX          R14
 00000012          ENDP ; 'init_ADC1?T'


*** CODE SEGMENT '?PR?init_ADC2?T?slave':
   14: PINSEL1|=0x04000000;
 00000000  4800      LDR         R2,=0x4000000
 00000002  4800      LDR         R0,=0xE002C004
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4311      ORR         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
   15: ADCR=0x00200204;    //adc clock=PCLK/(2+1),  no burst mode, ADC enabled
 0000000A  4800      LDR         R1,=0x200204
 0000000C  4800      LDR         R0,=0xE0034000
 0000000E  6001      STR         R1,[R0,#0x0]
   16: }
 00000010  4770      BX          R14
 00000012          ENDP ; 'init_ADC2?T'


*** CODE SEGMENT '?PR?init_ADC3?T?slave':
   20: PINSEL1|=0x10000000;
 00000000  4800      LDR         R2,=0x10000000
 00000002  4800      LDR         R0,=0xE002C004
 00000004  6801      LDR         R1,[R0,#0x0]
 00000006  4311      ORR         R1,R2
 00000008  6001      STR         R1,[R0,#0x0]
   21: ADCR=0x00200208;    //adc clock=PCLK/(2+1),  no burst mode, ADC enabled
 0000000A  4800      LDR         R1,=0x200208
 0000000C  4800      LDR         R0,=0xE0034000
 0000000E  6001      STR         R1,[R0,#0x0]
   22: }
 00000010  4770      BX          R14
 00000012          ENDP ; 'init_ADC3?T'


*** CODE SEGMENT '?PR?read_adc?T?slave':
   25: unsigned int read_adc(void)
 00000000  B500      PUSH        {LR}
   26: {
 00000002            ; SCOPE-START
   29:  ADCR|=0x01000000;  //// start & chaannel ADC0 = P0.27
 00000002  4800      LDR         R2,=0x1000000
 00000004  4800      LDR         R0,=0xE0034000
 00000006  6801      LDR         R1,[R0,#0x0]
 00000008  4311      ORR         R1,R2
 0000000A  6001      STR         R1,[R0,#0x0]
   30:  delay_10us(2);
 0000000C  2002      MOV         R0,#0x2
 0000000E  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000010  FFF7      BL          delay_10us?T  ; T=0x0001  (2)
   31:  while((ADDR&0x80000000)==0);     //done==1
 00000012          L_123:
 00000012  4800      LDR         R0,=0xE0034004
 00000014  6800      LDR         R0,[R0,#0x0]
 00000016  4800      LDR         R1,=0x80000000
 00000018  4208      TST         R0,R1
 0000001A  D0FA      BEQ         L_123  ; T=0x00000012
   32:  g=ADDR;
 0000001C  4800      LDR         R0,=0xE0034004
 0000001E  6801      LDR         R1,[R0,#0x0]
 00000020  ---- Variable 'g' assigned to Register 'R1' ----
   33:  g=((g>>6)&0x3ff);  //10bit result
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 24  

 00000020  0989      LSR         R1,R1,#0x6 ; g
 00000022  4800      LDR         R0,=0x3FF
 00000024  4001      AND         R1,R0
   36:  ADCR&=0xF8FFFFFF;  //ADC stop
 00000026  4800      LDR         R3,=0x7000000
 00000028  4800      LDR         R0,=0xE0034000
 0000002A  6802      LDR         R2,[R0,#0x0]
 0000002C  439A      BIC         R2,R3
 0000002E  6002      STR         R2,[R0,#0x0]
   37:  return(g);
 00000030  1C08      MOV         R0,R1 ; g
 00000032            ; SCOPE-END
   38: }
 00000032  BC08      POP         {R3}
 00000034  4718      BX          R3
 00000036          ENDP ; 'read_adc?T'


*** CODE SEGMENT '?PR?temp?T?slave':
   41: void temp(int *temp)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C04      MOV         R4,R0 ; temp
 00000004  ---- Variable 'temp' assigned to Register 'R4' ----
   42: {
 00000004            ; SCOPE-START
   43:  int g=0;
 00000004  2500      MOV         R5,#0x0
 00000006  ---- Variable 'g' assigned to Register 'R5' ----
   45:  ADCR|=0x01000000;  //// start & chaannel ADC0 = P0.27
 00000006  4800      LDR         R2,=0x1000000
 00000008  4800      LDR         R0,=0xE0034000
 0000000A  6801      LDR         R1,[R0,#0x0]
 0000000C  4311      ORR         R1,R2
 0000000E  6001      STR         R1,[R0,#0x0]
   46:  delay_10us(3);
 00000010  2003      MOV         R0,#0x3
 00000012  F7FF      BL          delay_10us?T  ; T=0x0001  (1)
 00000014  FFF5      BL          delay_10us?T  ; T=0x0001  (2)
   47:  while((ADDR&0x80000000)==0);     //done==1
 00000016          L_128:
 00000016  4800      LDR         R0,=0xE0034004
 00000018  6800      LDR         R0,[R0,#0x0]
 0000001A  4800      LDR         R1,=0x80000000
 0000001C  4208      TST         R0,R1
 0000001E  D0FA      BEQ         L_128  ; T=0x00000016
   48:  g=ADDR;
 00000020  4800      LDR         R0,=0xE0034004
 00000022  6805      LDR         R5,[R0,#0x0]
   49:  g=((g>>6)&0x3ff);  //10bit result
 00000024  11AD      ASR         R5,R5,#0x6 ; g
 00000026  4800      LDR         R0,=0x3FF
 00000028  4005      AND         R5,R0
   50:  *temp=g;
 0000002A  1C29      MOV         R1,R5 ; g
 0000002C  1C20      MOV         R0,R4 ; temp
 0000002E  6001      STR         R1,[R0,#0x0] ; temp
   51:  ADCR&=0xF8FFFFFF;
 00000030  4800      LDR         R2,=0x7000000
 00000032  4800      LDR         R0,=0xE0034000
 00000034  6801      LDR         R1,[R0,#0x0]
 00000036  4391      BIC         R1,R2
 00000038  6001      STR         R1,[R0,#0x0]
 0000003A            ; SCOPE-END
 0000003A  BC30      POP         {R4-R5}
 0000003C  BC08      POP         {R3}
 0000003E  4718      BX          R3
 00000040          ENDP ; 'temp?T'


*** CODE SEGMENT '?PR?fire?T?slave':
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 25  

   10: {
 00000000            ; SCOPE-START
   12:      IODIR0=0xF0;
 00000000  21F0      MOV         R1,#0xF0
 00000002  4800      LDR         R0,=0xE0028008
 00000004  6001      STR         R1,[R0,#0x0]
   13:      input=IOPIN0;
 00000006  4800      LDR         R0,=0xE0028000
 00000008  6802      LDR         R2,[R0,#0x0]
 0000000A  ---- Variable 'input' assigned to Register 'R2' ----
   14:      if((input&0x04)==0x04)
 0000000A  1C10      MOV         R0,R2 ; input
 0000000C  2104      MOV         R1,#0x4
 0000000E  4208      TST         R0,R1 ; input
 00000010  D001      BEQ         L_132  ; T=0x00000016
   15:          return 1;
 00000012  2001      MOV         R0,#0x1
 00000014  E000      B           L_133  ; T=0x00000018
 00000016          L_132:
   17:          return 0;
 00000016  2000      MOV         R0,#0x0
 00000018            ; SCOPE-END
   18: }
 00000018          L_133:
 00000018  4770      BX          R14
 0000001A          ENDP ; 'fire?T'


*** CODE SEGMENT '?PR?obstacle?T?slave':
   21: {
 00000000            ; SCOPE-START
   23:      IODIR0=0xF0;
 00000000  21F0      MOV         R1,#0xF0
 00000002  4800      LDR         R0,=0xE0028008
 00000004  6001      STR         R1,[R0,#0x0]
   24:      input=IOPIN0;
 00000006  4800      LDR         R0,=0xE0028000
 00000008  6802      LDR         R2,[R0,#0x0]
 0000000A  ---- Variable 'input' assigned to Register 'R2' ----
   25:      if((input&0x08)==0x08)
 0000000A  1C10      MOV         R0,R2 ; input
 0000000C  2108      MOV         R1,#0x8
 0000000E  4208      TST         R0,R1 ; input
 00000010  D001      BEQ         L_135  ; T=0x00000016
   26:          return 1;
 00000012  2001      MOV         R0,#0x1
 00000014  E000      B           L_136  ; T=0x00000018
 00000016          L_135:
   28:          return 0;
 00000016  2000      MOV         R0,#0x0
 00000018            ; SCOPE-END
   29: }
 00000018          L_136:
 00000018  4770      BX          R14
 0000001A          ENDP ; 'obstacle?T'


*** CODE SEGMENT '?PR?main?slave':
   31: int main(void)
 00000000  B500      PUSH        {LR}
 00000002  B088      SUB         R13,#0x20
   32: {
 00000004            ; SCOPE-START
   34: int data=0,data1=0,data2=0,data3=0,f,o;
 00000004  2000      MOV         R0,#0x0
 00000006  9000      STR         R0,[R13,#0x0] ; data
 00000008  2000      MOV         R0,#0x0
 0000000A  9001      STR         R0,[R13,#0x4] ; data1
 0000000C  2000      MOV         R0,#0x0
 0000000E  9002      STR         R0,[R13,#0x8] ; data2
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 26  

 00000010  2000      MOV         R0,#0x0
 00000012  9003      STR         R0,[R13,#0xC] ; data3
   37: IODIR1 = 0X00FF0000;
 00000014  4800      LDR         R1,=0xFF0000
 00000016  4800      LDR         R0,=0xE0028018
 00000018  6001      STR         R1,[R0,#0x0]
   38: IOCLR1 = 0x00FF0000;
 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6001      STR         R1,[R0,#0x0]
   39: Can_Init();
 0000001E  F7FF      BL          Can_Init?T  ; T=0x0001  (1)
 00000020  FFEF      BL          Can_Init?T  ; T=0x0001  (2)
   40: Init_UART0();
 00000022  F7FF      BL          Init_UART0?T  ; T=0x0001  (1)
 00000024  FFED      BL          Init_UART0?T  ; T=0x0001  (2)
   41: init_4bit_lcd();
 00000026  F7FF      BL          init_4bit_lcd?T  ; T=0x0001  (1)
 00000028  FFEB      BL          init_4bit_lcd?T  ; T=0x0001  (2)
   42: send_string_u0("Slave..\n\r");
 0000002A  4800      LDR         R0,=??S_5 ; ??S_5
 0000002C  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          send_string_u0?T  ; T=0x0001  (2)
   43: disp_string(1,0x80,"slave.");
 00000030  4800      LDR         R2,=??S_6 ; ??S_6
 00000032  2001      MOV         R0,#0x1
 00000034  2180      MOV         R1,#0x80
 00000036  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 00000038  FFE3      BL          disp_string?T  ; T=0x0001  (2)
   44: while(1) {
 0000003A          L_140:
   46:           init_ADC();
 0000003A  F7FF      BL          init_ADC?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          init_ADC?T  ; T=0x0001  (2)
   47:          temp(&data);
 0000003E  A800      ADD         R0,R13,#0x0
 00000040  F7FF      BL          temp?T  ; T=0x0001  (1)
 00000042  FFDE      BL          temp?T  ; T=0x0001  (2)
   48:          val=(((float)data/1024)*330);
 00000044  9800      LDR         R0,[R13,#0x0] ; data
 00000046  F7FF      BL          ?C?FCAST?T  ; T=0x0001  (1) ; ?C?FCAST?T
 00000048  FFDB      BL          ?C?FCAST?T  ; T=0x0001  (2) ; ?C?FCAST?T
 0000004A  4800      LDR         R1,=0x44800000
 0000004C  F7FF      BL          ?C?FPDIV?T  ; T=0x0001  (1) ; ?C?FPDIV?T
 0000004E  FFD8      BL          ?C?FPDIV?T  ; T=0x0001  (2) ; ?C?FPDIV?T
 00000050  4800      LDR         R1,=0x43A50000
 00000052  F7FF      BL          ?C?FPMUL?T  ; T=0x0001  (1) ; ?C?FPMUL?T
 00000054  FFD5      BL          ?C?FPMUL?T  ; T=0x0001  (2) ; ?C?FPMUL?T
 00000056  F7FF      BL          ?C?CASTF?T  ; T=0x0001  (1) ; ?C?CASTF?T
 00000058  FFD3      BL          ?C?CASTF?T  ; T=0x0001  (2) ; ?C?CASTF?T
 0000005A  1C04      MOV         R4,R0 ; val
 0000005C  ---- Variable 'val' assigned to Register 'R4' ----
   49:          sprintf(dt," Temp: %2d dC",val);
 0000005C  A804      ADD         R0,R13,#0x10
 0000005E  4800      LDR         R1,=??S_7 ; ??S_7
 00000060  1C22      MOV         R2,R4 ; val
 00000062  F7FF      BL          sprintf?T  ; T=0x0001  (1)
 00000064  FFCD      BL          sprintf?T  ; T=0x0001  (2)
   50:          disp_string(0,0x80,dt);
 00000066  AA04      ADD         R2,R13,#0x10
 00000068  2000      MOV         R0,#0x0
 0000006A  2180      MOV         R1,#0x80
 0000006C  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 0000006E  FFC8      BL          disp_string?T  ; T=0x0001  (2)
   51:          send_string_u0(dt);
 00000070  A804      ADD         R0,R13,#0x10
 00000072  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 27  

 00000074  FFC5      BL          send_string_u0?T  ; T=0x0001  (2)
   52:          send_string_u0("\n\r");
 00000076  4800      LDR         R0,=??S_8 ; ??S_8
 00000078  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 0000007A  FFC2      BL          send_string_u0?T  ; T=0x0001  (2)
   54:          init_ADC1();
 0000007C  F7FF      BL          init_ADC1?T  ; T=0x0001  (1)
 0000007E  FFC0      BL          init_ADC1?T  ; T=0x0001  (2)
   55:          temp(&data1);
 00000080  A801      ADD         R0,R13,#0x4
 00000082  F7FF      BL          temp?T  ; T=0x0001  (1)
 00000084  FFBD      BL          temp?T  ; T=0x0001  (2)
   56:          sprintf(dt," CO: %3d ",data1);
 00000086  A804      ADD         R0,R13,#0x10
 00000088  4800      LDR         R1,=??S_9 ; ??S_9
 0000008A  9A01      LDR         R2,[R13,#0x4] ; data1
 0000008C  F7FF      BL          sprintf?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          sprintf?T  ; T=0x0001  (2)
   57:          disp_string(0,0xc0,dt);
 00000090  AA04      ADD         R2,R13,#0x10
 00000092  2000      MOV         R0,#0x0
 00000094  21C0      MOV         R1,#0xC0
 00000096  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 00000098  FFB3      BL          disp_string?T  ; T=0x0001  (2)
   58:          send_string_u0(dt);
 0000009A  A804      ADD         R0,R13,#0x10
 0000009C  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          send_string_u0?T  ; T=0x0001  (2)
   59:          send_string_u0("\n\r");
 000000A0  4800      LDR         R0,=??S_8 ; ??S_8
 000000A2  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000000A4  FFAD      BL          send_string_u0?T  ; T=0x0001  (2)
   63:          init_ADC2();
 000000A6  F7FF      BL          init_ADC2?T  ; T=0x0001  (1)
 000000A8  FFAB      BL          init_ADC2?T  ; T=0x0001  (2)
   64:          temp(&data2);
 000000AA  A802      ADD         R0,R13,#0x8
 000000AC  F7FF      BL          temp?T  ; T=0x0001  (1)
 000000AE  FFA8      BL          temp?T  ; T=0x0001  (2)
   65:          sprintf(dt," Battery: %2d %",data2);
 000000B0  A804      ADD         R0,R13,#0x10
 000000B2  4800      LDR         R1,=??S_10 ; ??S_10
 000000B4  9A02      LDR         R2,[R13,#0x8] ; data2
 000000B6  F7FF      BL          sprintf?T  ; T=0x0001  (1)
 000000B8  FFA3      BL          sprintf?T  ; T=0x0001  (2)
   66:          disp_string(0,0x80,dt);
 000000BA  AA04      ADD         R2,R13,#0x10
 000000BC  2000      MOV         R0,#0x0
 000000BE  2180      MOV         R1,#0x80
 000000C0  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 000000C2  FF9E      BL          disp_string?T  ; T=0x0001  (2)
   67:          send_string_u0(dt);
 000000C4  A804      ADD         R0,R13,#0x10
 000000C6  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000000C8  FF9B      BL          send_string_u0?T  ; T=0x0001  (2)
   68:          send_string_u0("\n\r");
 000000CA  4800      LDR         R0,=??S_8 ; ??S_8
 000000CC  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000000CE  FF98      BL          send_string_u0?T  ; T=0x0001  (2)
   71:          init_ADC3();
 000000D0  F7FF      BL          init_ADC3?T  ; T=0x0001  (1)
 000000D2  FF96      BL          init_ADC3?T  ; T=0x0001  (2)
   72:          temp(&data3);
 000000D4  A803      ADD         R0,R13,#0xC
 000000D6  F7FF      BL          temp?T  ; T=0x0001  (1)
 000000D8  FF93      BL          temp?T  ; T=0x0001  (2)
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 28  

   73:          sprintf(dt," Fuel %2d L ",data3);
 000000DA  A804      ADD         R0,R13,#0x10
 000000DC  4800      LDR         R1,=??S_11 ; ??S_11
 000000DE  9A03      LDR         R2,[R13,#0xC] ; data3
 000000E0  F7FF      BL          sprintf?T  ; T=0x0001  (1)
 000000E2  FF8E      BL          sprintf?T  ; T=0x0001  (2)
   74:          disp_string(0,0xc0,dt);
 000000E4  AA04      ADD         R2,R13,#0x10
 000000E6  2000      MOV         R0,#0x0
 000000E8  21C0      MOV         R1,#0xC0
 000000EA  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 000000EC  FF89      BL          disp_string?T  ; T=0x0001  (2)
   75:          send_string_u0(dt);
 000000EE  A804      ADD         R0,R13,#0x10
 000000F0  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000000F2  FF86      BL          send_string_u0?T  ; T=0x0001  (2)
   76:          send_string_u0("\n\r");
 000000F4  4800      LDR         R0,=??S_8 ; ??S_8
 000000F6  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000000F8  FF83      BL          send_string_u0?T  ; T=0x0001  (2)
   80:          SendMessage1(0x000000AB,val,data1,data2,data3);
 000000FA  9803      LDR         R0,[R13,#0xC] ; data3
 000000FC  B401      PUSH        {R0}
 000000FE  9A02      LDR         R2,[R13,#0x8] ; data1
 00000100  9B03      LDR         R3,[R13,#0xC] ; data2
 00000102  1C21      MOV         R1,R4 ; val
 00000104  20AB      MOV         R0,#0xAB
 00000106  F7FF      BL          SendMessage1?T  ; T=0x0001  (1)
 00000108  FF7B      BL          SendMessage1?T  ; T=0x0001  (2)
 0000010A  B001      ADD         R13,#0x4
   82:          f=fire();
 0000010C  F7FF      BL          fire?T  ; T=0x0001  (1)
 0000010E  FF78      BL          fire?T  ; T=0x0001  (2)
 00000110  1C06      MOV         R6,R0 ; f
 00000112  ---- Variable 'f' assigned to Register 'R6' ----
   84:          o=obstacle();
 00000112  F7FF      BL          obstacle?T  ; T=0x0001  (1)
 00000114  FF75      BL          obstacle?T  ; T=0x0001  (2)
 00000116  1C05      MOV         R5,R0 ; o
 00000118  ---- Variable 'o' assigned to Register 'R5' ----
   86:          SendMessage2(0x000000AB,f,o);
 00000118  1C31      MOV         R1,R6 ; f
 0000011A  1C2A      MOV         R2,R5 ; o
 0000011C  20AB      MOV         R0,#0xAB
 0000011E  F7FF      BL          SendMessage2?T  ; T=0x0001  (1)
 00000120  FF6F      BL          SendMessage2?T  ; T=0x0001  (2)
   89:          if(f==1){
 00000122  1C30      MOV         R0,R6 ; f
 00000124  2801      CMP         R0,#0x1 ; f
 00000126  D10D      BNE         L_142  ; T=0x00000144
   90:             send_string_u0(" Fire Detected\n\r");
 00000128  4800      LDR         R0,=??S_12 ; ??S_12
 0000012A  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 0000012C  FF69      BL          send_string_u0?T  ; T=0x0001  (2)
   91:             send_string_u0(" Vehicle OFF!!!\n\r");
 0000012E  4800      LDR         R0,=??S_13 ; ??S_13
 00000130  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 00000132  FF66      BL          send_string_u0?T  ; T=0x0001  (2)
   92:             while(f==1){
 00000134  E002      B           L_143  ; T=0x0000013C
 00000136          L_145:
   93:                       f=fire();
 00000136  F7FF      BL          fire?T  ; T=0x0001  (1)
 00000138  FF63      BL          fire?T  ; T=0x0001  (2)
 0000013A  1C06      MOV         R6,R0 ; f
   94:                     }
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 29  

 0000013C          L_143:
 0000013C  1C30      MOV         R0,R6 ; f
 0000013E  2801      CMP         R0,#0x1 ; f
 00000140  D0F9      BEQ         L_145  ; T=0x00000136
   95:             }
 00000142  E002      B           L_147  ; T=0x0000014A
 00000144          L_142:
   97:             send_string_u0(" No Fire\n\r");
 00000144  4800      LDR         R0,=??S_14 ; ??S_14
 00000146  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 00000148  FF5B      BL          send_string_u0?T  ; T=0x0001  (2)
 0000014A          L_147:
  100:          if(o==1){
 0000014A  1C28      MOV         R0,R5 ; o
 0000014C  2801      CMP         R0,#0x1 ; o
 0000014E  D10D      BNE         L_148  ; T=0x0000016C
  101:             send_string_u0(" Obstacle Detected\n\r");
 00000150  4800      LDR         R0,=??S_15 ; ??S_15
 00000152  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 00000154  FF55      BL          send_string_u0?T  ; T=0x0001  (2)
  102:             send_string_u0(" Vehicle OFF!!!\n\r");
 00000156  4800      LDR         R0,=??S_13 ; ??S_13
 00000158  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 0000015A  FF52      BL          send_string_u0?T  ; T=0x0001  (2)
  103:             while(o==1){
 0000015C  E002      B           L_149  ; T=0x00000164
 0000015E          L_151:
  104:                          o=obstacle();
 0000015E  F7FF      BL          obstacle?T  ; T=0x0001  (1)
 00000160  FF4F      BL          obstacle?T  ; T=0x0001  (2)
 00000162  1C05      MOV         R5,R0 ; o
  105:                     }
 00000164          L_149:
 00000164  1C28      MOV         R0,R5 ; o
 00000166  2801      CMP         R0,#0x1 ; o
 00000168  D0F9      BEQ         L_151  ; T=0x0000015E
  106:             }
 0000016A  E002      B           L_153  ; T=0x00000172
 0000016C          L_148:
  108:             send_string_u0(" No Obstacle\n\r");     
 0000016C  4800      LDR         R0,=??S_16 ; ??S_16
 0000016E  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 00000170  FF47      BL          send_string_u0?T  ; T=0x0001  (2)
 00000172          L_153:
  112:            if(data1>390){
 00000172  9801      LDR         R0,[R13,#0x4] ; data1
 00000174  4800      LDR         R1,=0x186
 00000176  4288      CMP         R0,R1
 00000178  DD19      BLE         L_154  ; T=0x000001AE
  113:             disp_string(0,0x80," High CO Level ");
 0000017A  4800      LDR         R2,=??S_17 ; ??S_17
 0000017C  2000      MOV         R0,#0x0
 0000017E  2180      MOV         R1,#0x80
 00000180  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 00000182  FF3E      BL          disp_string?T  ; T=0x0001  (2)
  114:             disp_string(0,0xc0," Vehicle OFF!!!");
 00000184  4800      LDR         R2,=??S_18 ; ??S_18
 00000186  2000      MOV         R0,#0x0
 00000188  21C0      MOV         R1,#0xC0
 0000018A  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 0000018C  FF39      BL          disp_string?T  ; T=0x0001  (2)
  115:             send_string_u0("\n\r High CO Level \n\r");   
 0000018E  4800      LDR         R0,=??S_19 ; ??S_19
 00000190  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 00000192  FF36      BL          send_string_u0?T  ; T=0x0001  (2)
  116:             send_string_u0(" Vehicle OFF!!!\n\r");   
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 30  

 00000194  4800      LDR         R0,=??S_13 ; ??S_13
 00000196  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 00000198  FF33      BL          send_string_u0?T  ; T=0x0001  (2)
  118:             while(data1>390){
 0000019A  E004      B           L_155  ; T=0x000001A6
 0000019C          L_157:
  119:                     init_ADC1();
 0000019C  F7FF      BL          init_ADC1?T  ; T=0x0001  (1)
 0000019E  FF30      BL          init_ADC1?T  ; T=0x0001  (2)
  120:                     temp(&data1);
 000001A0  A801      ADD         R0,R13,#0x4
 000001A2  F7FF      BL          temp?T  ; T=0x0001  (1)
 000001A4  FF2D      BL          temp?T  ; T=0x0001  (2)
  121:                     }
 000001A6          L_155:
 000001A6  9801      LDR         R0,[R13,#0x4] ; data1
 000001A8  4800      LDR         R1,=0x186
 000001AA  4288      CMP         R0,R1
 000001AC  DCF6      BGT         L_157  ; T=0x0000019C
  122:             }
 000001AE          L_154:
  123:         if(val>60){
 000001AE  1C20      MOV         R0,R4 ; val
 000001B0  283C      CMP         R0,#0x3C ; val
 000001B2  D924      BLS         L_159  ; T=0x000001FE
  124:             disp_string(0,0x80,"High Temp Level");
 000001B4  4800      LDR         R2,=??S_20 ; ??S_20
 000001B6  2000      MOV         R0,#0x0
 000001B8  2180      MOV         R1,#0x80
 000001BA  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 000001BC  FF21      BL          disp_string?T  ; T=0x0001  (2)
  125:             disp_string(0,0xc0," Vehicle OFF!!!");
 000001BE  4800      LDR         R2,=??S_18 ; ??S_18
 000001C0  2000      MOV         R0,#0x0
 000001C2  21C0      MOV         R1,#0xC0
 000001C4  F7FF      BL          disp_string?T  ; T=0x0001  (1)
 000001C6  FF1C      BL          disp_string?T  ; T=0x0001  (2)
  126:             send_string_u0("\n\r High Temp Level \n\r");     
 000001C8  4800      LDR         R0,=??S_21 ; ??S_21
 000001CA  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000001CC  FF19      BL          send_string_u0?T  ; T=0x0001  (2)
  127:             send_string_u0(" Vehicle OFF!!!\n\r");  
 000001CE  4800      LDR         R0,=??S_13 ; ??S_13
 000001D0  F7FF      BL          send_string_u0?T  ; T=0x0001  (1)
 000001D2  FF16      BL          send_string_u0?T  ; T=0x0001  (2)
  128:             while(val>60){
 000001D4  E010      B           L_160  ; T=0x000001F8
 000001D6          L_162:
  129:                     init_ADC();
 000001D6  F7FF      BL          init_ADC?T  ; T=0x0001  (1)
 000001D8  FF13      BL          init_ADC?T  ; T=0x0001  (2)
  130:                     temp(&data);
 000001DA  A800      ADD         R0,R13,#0x0
 000001DC  F7FF      BL          temp?T  ; T=0x0001  (1)
 000001DE  FF10      BL          temp?T  ; T=0x0001  (2)
  131:                     val=(((float)data/1024)*330);
 000001E0  9800      LDR         R0,[R13,#0x0] ; data
 000001E2  F7FF      BL          ?C?FCAST?T  ; T=0x0001  (1) ; ?C?FCAST?T
 000001E4  FF0D      BL          ?C?FCAST?T  ; T=0x0001  (2) ; ?C?FCAST?T
 000001E6  4800      LDR         R1,=0x44800000
 000001E8  F7FF      BL          ?C?FPDIV?T  ; T=0x0001  (1) ; ?C?FPDIV?T
 000001EA  FF0A      BL          ?C?FPDIV?T  ; T=0x0001  (2) ; ?C?FPDIV?T
 000001EC  4800      LDR         R1,=0x43A50000
 000001EE  F7FF      BL          ?C?FPMUL?T  ; T=0x0001  (1) ; ?C?FPMUL?T
 000001F0  FF07      BL          ?C?FPMUL?T  ; T=0x0001  (2) ; ?C?FPMUL?T
 000001F2  F7FF      BL          ?C?CASTF?T  ; T=0x0001  (1) ; ?C?CASTF?T
ARM COMPILER V2.53,  slave                                                                 04/11/14  13:47:15  PAGE 31  

 000001F4  FF05      BL          ?C?CASTF?T  ; T=0x0001  (2) ; ?C?CASTF?T
 000001F6  1C04      MOV         R4,R0 ; val
  132:                     }
 000001F8          L_160:
 000001F8  1C20      MOV         R0,R4 ; val
 000001FA  283C      CMP         R0,#0x3C ; val
 000001FC  D8EB      BHI         L_162  ; T=0x000001D6
  133:             }
 000001FE          L_159:
  134:              delay_ms(1000);    
 000001FE  48FA      LDR         R0,=0x3E8
 00000200  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000202  FEFE      BL          delay_ms?T  ; T=0x0001  (2)
  135: }
 00000204  E719      B           L_140  ; T=0x0000003A
  136: return 0;
 00000206            ; SCOPE-END
  137: }
 00000206  B008      ADD         R13,#0x20
 00000208  BC08      POP         {R3}
 0000020A  4718      BX          R3
 0000020C          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =       281
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
